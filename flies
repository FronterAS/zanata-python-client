#!/usr/bin/env python
import getopt, sys
import ConfigParser
import json
import os.path
from restrequest import Connection

def usage():
    print "Client for talking to a Flies Server"
    print "basic command:"
    print " list        List all available projects"
    print "use 'flies --help' for the full list of commands or 'flies -v' for details"

def helpmessage():
    print "Usage:"
    print "publican pull     pull the content of publican file"
    print "publican push     push the content of publican to Flies Server"

def get_config_var():
    projectconfig = "./.fliesrc"
    config = ConfigParser.ConfigParser()
    config.read([projectconfig, os.path.expanduser("~/.fliesrc")])
    server = config.get('Config', 'server')
    projectid = config.get('Config', 'project.id')
    iterationid = config.get('Config', 'project.iteration.id')
    user = config.get('Config', 'user')
    apikey = config.get('Config', 'apikey')
    return server, projectid, iterationid, user, apikey    
 
def main():
    try:
        opts, args = getopt.gnu_getopt(sys.argv[1:], "v", ["server=", "project=", "iteration=", "name=", "description="])
    except getopt.GetoptError, err:
        print str(err)
        sys.exit(2)
    serverurl, projectid, iterationid, user, apikey = get_config_var() 
    if len(args) == 0:
       if len(opts) == 0:
          usage()
          sys.exit()
    else:
       if args[0] == 'help':
          helpmessage()
          sys.exit()
       else:
          serveroption = ''
          projectname = ''
          desc = ''
          
          for o, a in opts:
              if o == "--server":
                 serveroption = a
              elif o == "--name":
                 projectname = a
              elif o == "--description":
                 desc = a
              elif o == '--project':
                 id = a
              elif o == '--iteration':
                 iteration = a
          
          server = serverurl or serveroption
          if server:
             connection = Connection(server, None, None)
          else:
             "Please use --server option to set server url"
          
          headers = {}
          if args[0] == 'list':
             res, content = connection.request_get('/projects')
             print 'Status: '+res['status']
             if res.get('status') == '200':
                projects = json.loads(content)
                for project in projects:
                    print "*"*40
                    print project
          elif args[0] == 'projectinfo':
              if len(opts) < 1:
                 print 'Please use flies projectinfo --project=project_id to retrieve the project info'
              else:
                 res, content = connection.request_get('/projects/p/%s'%id)
                 print 'Status: '+res['status']
                 print content
          elif args[0] == 'iterationinfo' or args[0] == 'info' :
              if len(opts) < 2:
                 print 'Please use flies iterationinfo|info --project=project_id --iteration=iteration_id to retrieve the iteration'
              else:
                 res, content = connection.request_get('/projects/p/%s/iterations/i/%s'%(id,iteration))
                 print 'Status: '+res['status']
                 print content
          elif args[0] == 'create':
               if user and apikey :
                  headers['X-Auth-User']= user
                  headers['X-Auth-Token']= apikey
               else:
                  print "Please provide username and apikey in .fliesrc"
                  sys.exit()
 
               if len(args) == 3:
                  if args[1] == 'project':
                     if len(opts) < 2:
                        print "Please provide valid options: '--name=project_name --description=project_description'"             
                     else:   
                        if projectname and desc :
                           body = '''{"name":"%s","id":"%s","description":"%s","type":"IterationProject"}'''%(projectname,args[2],desc)
                           res, content = connection.request_put('/projects/p/%s'%args[2], args=body, headers=headers)
                           print 'Status: '+res['status']
                        else:
                           print "Please provide valid options: '--name=project_name --description=project_description'"
                  elif args[1] == 'iteration':
                     print "Create the iteration"
                  else:
                     print "No such command"
               else:
                     print "Please use 'flies create project project_id --name=project_name --description=project_description' to create project"
          elif args[0] == 'create' and args[1] == 'iteration':
               print "Create the iteration"
          elif args[0] == 'po' and args[1] == 'pull': 
       	       print "Pull the content of PO"
          elif args[0] == 'po' and args[1] == 'push':
               print "Push the content of PO"
          elif args[0] == 'publican' and args[1] == 'pull':
	       print "Pull the content of publican"
          elif args[0] == 'publican' and args[1] == 'push':
               print "Push the content of publican"
          else:
              helpmessage()
              sys.exit()           

if __name__ == "__main__":
        main()       
